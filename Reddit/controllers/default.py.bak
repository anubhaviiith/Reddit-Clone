# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################


def index():
    if not session.counter:
        session.counter = 1
    else:
        session.counter += 1
    return dict(message="This is a web application similar to Reddit", counter=session.counter,form=auth())
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
def display_form():
    return dict()
def displaylist():
    record=db().select(db.item.heading,db.item.url,db.item.category)
    return dict(record=record)
def rate():
	form=SQLFORM(db.like)
	if form.accepts(request.vars):
		response.flash=T('Item Rated !!')
	return dict(form=form)
def likes():
	ctr=0
	record=db(db.like.like=='Yes').select(db.like.item,db.like.like)
	return dict(record=record)
def viewcomment():
	item_id=request.args(0)
        db.comment.itemid.default=item_id
def category()
	record=db().select(db.item.category)
	return dict(record=record)
def viewcat():
	record=db(db.item.category==(request.args(0))).select(db.item.heading)
	return dict(record=record)
